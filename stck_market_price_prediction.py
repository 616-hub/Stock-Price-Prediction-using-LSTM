# -*- coding: utf-8 -*-
"""stck market price prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tJkxniBflGyFlqowSpYfAnwKsxrvM3rn
"""

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# 1. Download historical stock data
stock_symbol = 'AAPL'
df = yf.download(stock_symbol, start='2015-01-01', end='2024-01-01')
data = df[['Close']]

# 2. Normalize the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# 3. Create training data
x_train, y_train = [], []
sequence_length = 60

for i in range(sequence_length, len(scaled_data)):
    x_train.append(scaled_data[i-sequence_length:i, 0])
    y_train.append(scaled_data[i, 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# 4. Build the LSTM model
model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, epochs=20, batch_size=32)

# 5. Test the model
test_data = scaled_data[-(sequence_length+100):]
x_test, y_test = [], scaled_data[-100:]

for i in range(sequence_length, len(test_data)):
    x_test.append(test_data[i-sequence_length:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)
actual_prices = scaler.inverse_transform(y_test)

# 6. Plot predictions vs actual prices
plt.figure(figsize=(10, 6))
plt.plot(actual_prices, color='black', label="Actual Price")
plt.plot(predictions, color='green', label="Predicted Price")
plt.title(f"{stock_symbol} Stock Price Prediction")
plt.xlabel("Days")
plt.ylabel("Price (USD)")
plt.legend()
plt.show()